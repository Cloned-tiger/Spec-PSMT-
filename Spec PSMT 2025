"""The Wall"""
#the time complexity for this script is linear so dont use too high numbers otherwise it might take a while. A million simulations takes about 15 seconds on my end.
import random

def main():
    print("Enter just a number. The greater the number the closer it gets to the calculated expected values")
    simulations = int(input("How many simulations per slot? "))
    bin_mappings = {
        1: {0: ("bin 5", 100), 1: ("bin 4", 100), 2: ("bin 3", 400), 3: ("bin 2", 500), 4: ("bin 1", 0)},  # Multiplier bin
        2: {0: ("bin 6", "Try Again"), 1: ("bin 5", 100), 2: ("bin 4", 100), 3: ("bin 3", 400), 4: ("bin 2", 500)},
        3: {0: ("bin 7", 0), 1: ("bin 6", "Try Again"), 2: ("bin 5", 100), 3: ("bin 4", 100), 4: ("bin 3", 400)},
        4: {0: ("bin 8", 50000), 1: ("bin 7", 0), 2: ("bin 6", "Try Again"), 3: ("bin 5", 100), 4: ("bin 4", 100)}
    }

    best_slot = None
    best_average = 0

    for slot in range(1, 5):  
        total_value = 0
        for _ in range(simulations):
            count_L = drop().count("L")
            bin_name, bin_value = bin_mappings[slot].get(count_L, ("Unknown", 0))
            
            total_value += process_bin_value(bin_name, bin_value, bin_mappings)

        average_value = total_value / simulations
        print(f"Average return for Slot {slot}: ${average_value:.2f}")
        if average_value > best_average:
            best_average = average_value
            best_slot = slot

    print(f"\nBest Slot: Slot {best_slot} avg return: {best_average:.2f}")

def drop():
    """Dropping mechanism for randomness"""
    return "".join(random.choice("LR") for _ in range(4))

def redrop(bin_mappings):
    """Redrop ball from Slot 4 """
    count_L = drop().count("L")
    bin_name, bin_value = bin_mappings[4].get(count_L, ("Unknown", 0))
    return process_bin_value(bin_name, bin_value, bin_mappings)

def process_bin_value(bin_name, bin_value, bin_mappings):
    if bin_value == "Try Again":
        return redrop(bin_mappings)
    elif bin_name == "bin 1":  
        redrop_value = redrop(bin_mappings)
        return redrop_value * 2.5  
    return bin_value

if __name__ == "__main__":
    main()
